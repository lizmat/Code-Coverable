=begin pod

=head1 NAME

Code::Coverable - Produce overview of coverable lines of code

=head1 SYNOPSIS

=begin code :lang<raku>

use Code::Coverable;

say coverable-lines($path.IO);  # (3 5 11 24)

say coverable-lines($source);   # (7 9 23 25)

my @coverables = coverables(@paths);

=end code

=head1 DESCRIPTION

Code::Coverable contains logic for producing code coverage reports.

This is still a work in progress.  At the moment it will only export two
subroutines and install a script "coverage-lines".

=head1 SUBROUTINES

=head2 coverable-lines

=begin code :lang<raku>

say coverable-lines($path.IO);  # (3 5 11 24)

say coverable-lines($source);   # (7 9 23 25)

=end code

The C<coverable-lines> subroutine takes a single argument which is
either a C<IO::Path> or a C<Str>, uses its contents (slurped in case
of an C<IO::Path>), tries to build an AST from that and returns
a sorted list of line numbers that appear to have coverable code.

=head2 coverables

=begin code :lang<raku>

for coverables(@targets) -> $cc {
    say $cc.target;
    say $cc.key;
    say $cc.line-numbers;
    say $cc.source;
}

=end code

The C<coverables> subroutine takes any number of positional
arguments, each of which is assumed to be a target specification,
which can be:
=item a C<Str> specification of a Raku source file
=item an C<IO::Path> object specifying a Raku source file
=item a C<use> target (identity) such as "Foo::Bar:ver<0.0.2+>"

It returns a C<Seq> of C<Code::Coverable> objects.  Note that it
B<is> possible that even a single target produces more than one
C<Code::Coverable> object, if the source of the target has used
C<#line 42 filename> directives.

=begin code :lang<raku>

for coverables("String::Utils", :repo<.>) -> $cc {
    say $cc.target;
    say $cc.key;
    say $cc.line-numbers;
    say $cc.source;
}

=end code

If C<use> targets (identities) are specified, a C<:repo> named
argument can be specified to indicate the repository to be used,
which can be an object of type:
=item Str - indicate a path for a ::FileSystem repo, just as with -I.
=item IO::Path - indicate a path for a ::FileSystem repo
=item CompUnit::Repository - the actual repo to use

The default is to use the current C<$*REPO> setting to resolve any
identity given.

=head1 CLASSES

=head2 Code::Coverable

The C<Code::Coverable> object is generally created by the C<coverables>
subroutine, but could also be created manually.

=begin code :lang<raku>

my $cc = Code::Coverable.new(
  target       => "Identity::Utils",
  line-numbers => (1,14,19,...),
  key          => "site#sources/072CEA63F659CFD963095494CEA22A46E4F93A95 (Identity::Utils)"
  source         => "/.../site/sources/072CEA63F659CFD963095494CEA22A46E4F93A95".IO,
);

=end code

The following public attributes are available:

=head3 target

Mandatory: a string with the target for these coverables: this can
either be C<use> target (identity), or a path to a source file.

=head3 line-numbers

Mandatory: a C<List> of unique integer values of the line numbers
that B<could> potentially be covered in a coverage log.

=head3 key

Optional: a string that should match in the coverage log to mark
a line as being "covered".  Defaults to the target given.

=head3 source

Optional: an C<IO::Path> object of the Raku source file. If not
specified, will be derived from the information specified for the key.

=head1 SCRIPTS

=head2 coverable-lines

=begin output

$ coverable-lines t/01-basic.rakutest 
t/01-basic.rakutest: 1,3,5,7,8,9,10,13,14,15,16,17

$ coverable-lines snapper
core#sources/0D09916411FC21C59FC3C0980C68547D31562E01 (snapper): 1,8,10

=end output

The C<coverable-lines> script accepts any number of paths or C<use>
targets and will attempt to produce one line of output with the
coverage key and the line numbers of the lines that may appear in
a coverage report.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

=head1 COPYRIGHT AND LICENSE

Copyright 2024, 2025 Elizabeth Mattijsen

Source can be located at: https://github.com/lizmat/Code-Coverable . Comments and
Pull Requests are welcome.

If you like this module, or what I'm doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
