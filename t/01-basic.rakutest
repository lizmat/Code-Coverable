use Test;

use Code::Coverable;

plan 5;

my $prefix := $*PROGRAM.parent(2);
my $coverable-lines := $prefix.add("bin/coverable-lines");
my @paths = (
  $coverable-lines,
  $*PROGRAM,
  $*PROGRAM.sibling("02-identity.rakutest"),
#  $*PROGRAM.parent.sibling("lib").add("Code").add("Coverable.rakumod"),
).map(*.absolute);

is-deeply
  coverables(@paths).map({ .key => .line-numbers }).Map,
  Map.new(
    @paths[0] => (1,4,5,6),
    @paths[1] => (1,3,5,7,8,9,10,11,12,14,16,17,18,19,20,21,25,27,28,29,30,31,32,33,34),
    @paths[2] => (1,3,6,10,12,14,16,17,20,21,22,24,25,26),
#    @paths[3] => (1,2,4,6,7,10,11,12,13,16,17,18,19,22,25,26,27,28,29,30,31,34,
#                  35,36,40,42,43,45,46,47,48,50,51,52,53,56),
  ),
  'are all keys and expected lines seen';

my $proc := run $*EXECUTABLE, "-I$prefix", $coverable-lines, "snapper", :out, :err;
is $proc.exitcode, 0, 'ran script ok';
my $out := $proc.out.slurp;
ok $out.contains("core#sources" & " (snapper): "),
  'produced expected output';
isa-ok key2source($out.split(":").head), IO::Path;
ok $proc.err.slurp.starts-with("Telemetry Report of Process"),
  'produces expected error output';

# vim: expandtab shiftwidth=4
